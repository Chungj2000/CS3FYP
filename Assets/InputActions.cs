//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""3bcb8e13-dc29-46b2-b670-cf972f5afabc"",
            ""actions"": [
                {
                    ""name"": ""CameraMoveInputs"",
                    ""type"": ""Value"",
                    ""id"": ""805359cf-2c29-471c-9ae6-b3d3fdac0284"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotateInputs"",
                    ""type"": ""Value"",
                    ""id"": ""4646b48a-1fb7-4021-8833-2eb6387adb36"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoomInputs"",
                    ""type"": ""Value"",
                    ""id"": ""13b43bec-0eba-41a1-a6a8-84e8920ce82d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef72bfad-6f5d-451f-a752-f8ec282bcdf0"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoomInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""dff63624-44cc-46bb-8488-6e7ceadb4de3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveInputs"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""014fa367-6447-4be7-bbef-c277df89413d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f52a78f6-118a-4b34-b783-c766b02c7d18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2505365e-9f44-4ce1-a1f8-33430a5f18e5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63ac1238-ea36-447f-816e-ccaee2384584"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""803a42f0-6a55-400b-9f29-556792532e30"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39460e90-fafb-44a3-b3df-73eab8be8eb3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=-1)"",
                    ""groups"": """",
                    ""action"": ""CameraRotateInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""b728c2bf-6d57-4673-9b69-7e011c565e7c"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""cc1848c1-3ccd-4fa3-ae42-d361f5bde2f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""211c14db-5737-425a-9e6c-9485374b4030"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_CameraMoveInputs = m_Camera.FindAction("CameraMoveInputs", throwIfNotFound: true);
        m_Camera_CameraRotateInputs = m_Camera.FindAction("CameraRotateInputs", throwIfNotFound: true);
        m_Camera_CameraZoomInputs = m_Camera.FindAction("CameraZoomInputs", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_CameraMoveInputs;
    private readonly InputAction m_Camera_CameraRotateInputs;
    private readonly InputAction m_Camera_CameraZoomInputs;
    public struct CameraActions
    {
        private @InputActions m_Wrapper;
        public CameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMoveInputs => m_Wrapper.m_Camera_CameraMoveInputs;
        public InputAction @CameraRotateInputs => m_Wrapper.m_Camera_CameraRotateInputs;
        public InputAction @CameraZoomInputs => m_Wrapper.m_Camera_CameraZoomInputs;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @CameraMoveInputs.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraMoveInputs;
                @CameraMoveInputs.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraMoveInputs;
                @CameraMoveInputs.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraMoveInputs;
                @CameraRotateInputs.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotateInputs;
                @CameraRotateInputs.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotateInputs;
                @CameraRotateInputs.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotateInputs;
                @CameraZoomInputs.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraZoomInputs;
                @CameraZoomInputs.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraZoomInputs;
                @CameraZoomInputs.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraZoomInputs;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraMoveInputs.started += instance.OnCameraMoveInputs;
                @CameraMoveInputs.performed += instance.OnCameraMoveInputs;
                @CameraMoveInputs.canceled += instance.OnCameraMoveInputs;
                @CameraRotateInputs.started += instance.OnCameraRotateInputs;
                @CameraRotateInputs.performed += instance.OnCameraRotateInputs;
                @CameraRotateInputs.canceled += instance.OnCameraRotateInputs;
                @CameraZoomInputs.started += instance.OnCameraZoomInputs;
                @CameraZoomInputs.performed += instance.OnCameraZoomInputs;
                @CameraZoomInputs.canceled += instance.OnCameraZoomInputs;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private IPauseActions m_PauseActionsCallbackInterface;
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @InputActions m_Wrapper;
        public PauseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void SetCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PauseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PauseActions @Pause => new PauseActions(this);
    public interface ICameraActions
    {
        void OnCameraMoveInputs(InputAction.CallbackContext context);
        void OnCameraRotateInputs(InputAction.CallbackContext context);
        void OnCameraZoomInputs(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
